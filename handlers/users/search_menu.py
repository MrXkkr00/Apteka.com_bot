import openpyxl
import re
from aiogram import types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    KeyboardButton, CallbackQuery

from data.config import ADMINS
from keyboards.default.contact_button import contact_keyboard
from .transliterate import to_cyrillic

from keyboards.default.menu import bosh_menu, qayta_izlash, qayta_izlash_IN
from loader import dp, bot

wb = openpyxl.load_workbook('./data/Apteka.xlsx')
ws = wb.active
dori_nomi = [ws.cell(row=i, column=1).value for i in range(1, ws.max_row)]
dori_narxi = [ws.cell(row=i, column=2).value for i in range(1, ws.max_row)]

izlash_2 = ReplyKeyboardMarkup(keyboard=[
    [
        KeyboardButton(text="üîç–ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞"),
    ],
    [
        KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ],

], resize_keyboard=True
)


def ignore_case_search_example(text, pattern):
    # text = "I have an Apple and a banana."
    # pattern = r"apple"
    result = re.search(pattern, text, re.IGNORECASE)
    if result:
        return 1
    else:
        return 0


# text = "–ü–ê–†–û–î–û–ù–¢–û–õ."
# pattern = r"–ø–∞—Ä"
# ignore_case_search_example(text, pattern)


class Searchstate(StatesGroup):
    search = State()
    buyurtma = State()
    dori = State()
    count = State()
    contact = State()


list = []


@dp.message_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state=[Searchstate.buyurtma, Searchstate.dori, Searchstate.count])
async def search_ct(message: types.Message, state: FSMContext):
    await message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç", reply_markup=bosh_menu)
    await state.finish()


@dp.message_handler(text="üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤")
async def bot_st1art1(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    await Searchstate.search.set()


@dp.callback_query_handler(text="üîç –ü–æ–∏—Å–∫ –ª–µ–∫–∞—Ä—Å—Ç–≤")
async def buy_co213urses(call: CallbackQuery):
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    await call.message.delete()
    await Searchstate.search.set()



@dp.message_handler(state=Searchstate.search)
async def bot_star1t1(message: types.Message, state: FSMContext):
    msg = message.text
    result = lambda msg: to_cyrillic(msg) if msg.isascii() else msg
    dori = result(msg)
    list = []
    natija = 0
    for i in range(913):
        if ignore_case_search_example(dori_nomi[i + 1], dori) == 1:
            list.append(dori_nomi[i + 1])
            summ = float(dori_narxi[i + 1])
            summa = round(summ, 2)
            natija = 1
            await message.answer(
                f"#Ô∏è‚É£<b>{(i + 1)}</b>         {dori_nomi[i + 1]}\n"
                f"                           üíµ {summa} $")

    if natija == 1:
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª", reply_markup=qayta_izlash)
        await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª", reply_markup=qayta_izlash_IN)
        await Searchstate.next()

    else:
        await message.answer(f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n"
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –Ω–∞–π–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=bosh_menu)
        await state.finish()


@dp.message_handler(text="üîç–ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞", state=[Searchstate.buyurtma, Searchstate.dori, Searchstate.count])
async def bot_st1art1(message: types.Message):
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    await Searchstate.search.set()


@dp.callback_query_handler(text="üìã–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", state=Searchstate.buyurtma)
async def buy_courses(call: CallbackQuery):
    await call.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä)\n–ù–∞–ø—Ä–∏–º–µ—Ä : 44", reply_markup=izlash_2)
    await call.message.delete()
    await Searchstate.next()


@dp.callback_query_handler(text="üîç–ü–æ–∏—Å–∫ —Å–Ω–æ–≤–∞", state=Searchstate.buyurtma)
async def buy_courses(call: CallbackQuery):
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ", reply_markup=ReplyKeyboardRemove())
    await call.message.delete()
    await Searchstate.search.set()


@dp.callback_query_handler(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state=Searchstate.buyurtma)
async def buy_courses(call: CallbackQuery, state: FSMContext):
    await call.message.answer(f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç", reply_markup=bosh_menu)
    await call.message.delete()
    await state.finish()


@dp.message_handler(text="üìã–†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑", state=Searchstate.buyurtma)
async def bot_st1art1(message: types.Message):
    await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä)\n–ù–∞–ø—Ä–∏–º–µ—Ä : 44", reply_markup=izlash_2)
    await Searchstate.next()


@dp.message_handler(lambda message: not message.text.isdigit(), state=Searchstate.dori)
async def proc_invalid(message: types.Message):
    """
        If age is invalid
        """
    return await message.reply("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–¥–µ—Å—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 125", reply_markup=izlash_2)


@dp.message_handler(lambda message: message.text.isdigit(), state=Searchstate.dori)
async def dori_raqami(message: types.Message, state: FSMContext):
    nomer = int(message.text)
    dori = nomer
    await state.update_data(
        {"dori": dori}
    )
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ü–∏—Ñ—Ä–∞—Ö)\n –ù–∞–ø—Ä–∏–º–µ—Ä : 4",
                         reply_markup=izlash_2)
    await Searchstate.next()


@dp.message_handler(lambda message: not message.text.isdigit(), state=Searchstate.count)
async def proc_inva123lid(message: types.Message):
    """
        If age is invalid
        """
    return await message.reply("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–¥–µ—Å—å:\n–ù–∞–ø—Ä–∏–º–µ—Ä: 5", reply_markup=izlash_2)


@dp.message_handler(lambda message: message.text.isdigit(), state=Searchstate.count)
async def dori_soni(message: types.Message, state: FSMContext):
    nomer1 = int(message.text)
    await state.update_data(
        {"count": nomer1}
    )
    await message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏", reply_markup=contact_keyboard)
    await Searchstate.next()


@dp.message_handler(content_types='contact', state=Searchstate.contact)
async def search_cantact(message: types.Message, state: FSMContext):
    contact = message.contact
    data = await state.get_data()
    dori = data.get("dori")
    count = data.get("count")
    summ = float(count) * float(dori_narxi[dori])
    summa = round(summ, 2)
    # üôéüèª‚úÖüíäüì≤
    await message.answer(f"üôéüèª‚Äç‚ôÇ–ö–ª–∏–µ–Ω—Ç                 @{message.from_user.username}\n"
                         f"üíä –¢–æ–≤–∞—Ä—ã              {dori_nomi[dori]}\n"
                         f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ      {count}\n"
                         f"üíµ –û–±—â–∞—è —Å—É–º–º–∞   {summa} $ \n"
                         f"üì≤ –ö–æ–Ω—Ç–∞–∫—Ç            T.me/{contact.phone_number}")
    await bot.send_message(ADMINS[1], f"üôéüèª‚Äç‚ôÇ–ö–ª–∏–µ–Ω—Ç                 @{message.from_user.username}\n"
                                      f"üíä –¢–æ–≤–∞—Ä—ã              {dori_nomi[dori]}\n"
                                      f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ      {count}\n"
                                      f"üíµ –û–±—â–∞—è —Å—É–º–º–∞   {summa} $ \n"
                                      f"üì≤ –ö–æ–Ω—Ç–∞–∫—Ç            T.me/{contact.phone_number}")
    await message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç\n"
                         f"–ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏\n"
                         f"–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ —Ä–∞–∑"
                         , reply_markup=bosh_menu)
    await state.finish()
